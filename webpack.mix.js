const mix = require("laravel-mix");
require("laravel-mix-react-typescript-extension");
const tailwindcss = require("tailwindcss");

const MiniCssExtractPlugin = require("mini-css-extract-plugin");

mix.webpackConfig({
    output: {
        chunkFilename: "js/[name].js?id=[chunkhash]"
    },
    plugins: [new MiniCssExtractPlugin()],
    module: {
        rules: [
            {
                test: /\.css$/i,
                use: [MiniCssExtractPlugin.loader, "css-loader"]
            },
            {
                test: /\.scss$/,
                use: [
                    MiniCssExtractPlugin.loader,
                    "css-loader",
                    "sass-loader",
                    "postcss-loader"
                ]
            }
        ]
    }
});

mix.reactTypeScript("resources/js/app.tsx", "public/js");
mix.js("resources/js/styles.js", "public/css");

// mix.sass("resources/sass/app.scss", "public/css").options({
//     processCssUrls: false,
//     postCss: [tailwindcss("./tailwind.config.js")]
// });

// try to remove traces of "extract-text-webpack-plugin"
// inside the webpack config generated by laravel-mix
mix.override(config => {
    // STEP 1 : remove related plugins
    const cleanedPlugins = [];

    for (let i in config.plugins) {
        const plugin = config.plugins[i];
        if (plugin.constructor.name !== "ExtractTextPlugin") {
            cleanedPlugins.push(plugin);
        }
    }
    config.plugins = cleanedPlugins;

    // STEP 2 : remove style related rules
    const cleanedRules = [];

    for (let i in config.module.rules) {
        const rule = config.module.rules[i];

        if (!rule.loaders || !rule.loaders.includes("style-loader")) {
            cleanedRules.push(rule);
        }
    }
    config.module.rules = cleanedRules;
});
